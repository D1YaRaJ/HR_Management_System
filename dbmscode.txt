CREATE DATABASE CompanyDB;
USE CompanyDB;

-- Create table for HRMS login credentials
CREATE TABLE hrms_users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id VARCHAR(50) NOT NULL UNIQUE,
  password VARCHAR(100) NOT NULL
);

-- Insert HRMS admin user
INSERT INTO hrms_users (user_id, password) VALUES ('0', 'hrms@123');


CREATE TABLE employee_master (
  EID INT PRIMARY KEY,
  INITIAL VARCHAR(5),
  FIRSTNAME VARCHAR(50) NOT NULL,
  MIDDLENAME VARCHAR(50),
  LASTNAME VARCHAR(50),
  DESIGNATION VARCHAR(50),
  DOB DATE NOT NULL,
  DATE_OF_JOIN DATE,
  FTYPE VARCHAR(50),
  NATIONALITY VARCHAR(50),
  PHONE VARCHAR(10) NOT NULL,
  EMAIL VARCHAR(100) NOT NULL,
  CASTE VARCHAR(50),
  DOORNO VARCHAR(20),
  CITY VARCHAR(50),
  STATE VARCHAR(50),
  PINCODE INT,
  GENDER VARCHAR(6),
  PROFEXP_DESIGNATION VARCHAR(50),
  PPROFEXP_FROM DATE,
  PPROFEXP_TO DATE,
  DID INT,
  BIOMETRIC_CARD_NO VARCHAR(20),
  AADHAR BIGINT UNIQUE,
  BANK_ACC VARCHAR(14) UNIQUE,
  PAN VARCHAR(20) UNIQUE,
  INSTITUTION VARCHAR(100),
  PERCENTAGE DECIMAL(5, 2),
  SPECIALIZATION VARCHAR(50),
  YOG INT,
  FNAME VARCHAR(50),
  F_DOB DATE,
  MNAME VARCHAR(50),
  M_DOB DATE,
  PASSWORD VARCHAR(50)
);

CREATE TABLE DEPARTMENT (
  DID INT AUTO_INCREMENT PRIMARY KEY,
  NAME VARCHAR(100) NOT NULL UNIQUE
);

select * from employee_master;
select * from hrms_users;

CREATE TABLE emp_leave_type (
    EID INT NOT NULL,
    LEAVE_EL INT DEFAULT 0 COMMENT 'Earned Leave',
    LEAVE_SCL INT DEFAULT 0 COMMENT 'Special Casual Leave',
    LEAVE_RH INT DEFAULT 0 COMMENT 'Restricted Holiday',
    LEAVE_OOD INT DEFAULT 0 COMMENT 'Out of Duty',
    LEAVE_CL INT DEFAULT 0 COMMENT 'Casual Leave',
    LEAVE_VL INT DEFAULT 0 COMMENT 'Vacation Leave',
    LEAVE_OTHER INT DEFAULT 0 COMMENT 'Other Leave',
    LEAVE_COMPOFF INT DEFAULT 0 COMMENT 'Compensatory Off',
    fiscal_year YEAR NOT NULL,
    PRIMARY KEY (EID, fiscal_year),
    FOREIGN KEY (EID) REFERENCES employee_master(EID)
);

CREATE TABLE emp_leave(
    leave_id INT AUTO_INCREMENT PRIMARY KEY,
    EID INT NOT NULL,
    LTYPE ENUM('EL','SCL','RH','OOD','CL','VL','OTHER','COMPOFF') NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    no_of_days DECIMAL(5,1) NOT NULL,
    reason VARCHAR(300),  -- Shorter than TEXT, enough for most cases
    status ENUM('Pending','Approved','Rejected') DEFAULT 'Pending',
    applied_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    handover_to INT,
    FOREIGN KEY (EID) REFERENCES employee_master(EID),
    FOREIGN KEY (handover_to) REFERENCES employee_master(EID),
    CONSTRAINT chk_self_handover CHECK (EID != handover_to OR handover_to IS NULL)
);

DELIMITER $$
CREATE TRIGGER reduce_leave_balance
AFTER UPDATE ON emp_leave
FOR EACH ROW
BEGIN
    IF NEW.status = 'Approved' AND OLD.status != 'Approved' THEN
        UPDATE emp_leave_type
        SET 
            LEAVE_EL = IF(NEW.LTYPE = 'EL', LEAVE_EL - NEW.no_of_days, LEAVE_EL),
            LEAVE_SCL = IF(NEW.LTYPE = 'SCL', LEAVE_SCL - NEW.no_of_days, LEAVE_SCL),
            LEAVE_RH = IF(NEW.LTYPE = 'RH', LEAVE_RH - NEW.no_of_days, LEAVE_RH),
            LEAVE_OOD = IF(NEW.LTYPE = 'OOD', LEAVE_OOD - NEW.no_of_days, LEAVE_OOD),
            LEAVE_CL = IF(NEW.LTYPE = 'CL', LEAVE_CL - NEW.no_of_days, LEAVE_CL),
            LEAVE_VL = IF(NEW.LTYPE = 'VL', LEAVE_VL - NEW.no_of_days, LEAVE_VL),
            LEAVE_OTHER = IF(NEW.LTYPE = 'OTHER', LEAVE_OTHER - NEW.no_of_days, LEAVE_OTHER),
            LEAVE_COMPOFF = IF(NEW.LTYPE = 'COMPOFF', LEAVE_COMPOFF - NEW.no_of_days, LEAVE_COMPOFF)
        WHERE EID = NEW.EID AND fiscal_year = YEAR(NEW.from_date);
    END IF;
END$$
DELIMITER ;

select * from emp_leave;
select * from emp_leave_type;

ALTER TABLE emp_leave DROP FOREIGN KEY emp_leave_ibfk_1;
ALTER TABLE emp_leave 
ADD CONSTRAINT emp_leave_ibfk_1 
FOREIGN KEY (EID) REFERENCES employee_master(EID) ON DELETE CASCADE;

ALTER TABLE emp_leave_type DROP FOREIGN KEY emp_leave_type_ibfk_1;
ALTER TABLE emp_leave_type
ADD CONSTRAINT emp_leave_type_ibfk_1 
FOREIGN KEY (EID) REFERENCES employee_master(EID) ON DELETE CASCADE;

CREATE TABLE employee_qualification (
  id INT AUTO_INCREMENT PRIMARY KEY,
  EID INT,  -- foreign key to employee_master.EID
  INSTITUTION VARCHAR(255),
  PERCENTAGE DECIMAL(5,2),
  SPECIALIZATION VARCHAR(255),
  YOG INT,
  FOREIGN KEY (EID) REFERENCES employee_master(EID)
);

CREATE TABLE employee_experience (
  id INT AUTO_INCREMENT PRIMARY KEY,
  EID INT,  -- foreign key to employee_master.EID
  PROFEXP_DESIGNATION VARCHAR(255),
  PPROFEXP_FROM DATE,
  PPROFEXP_TO DATE,
  FOREIGN KEY (EID) REFERENCES employee_master(EID)
);

CREATE TABLE SALARY (
    EID INT PRIMARY KEY,
    BASIC DECIMAL(10,2) NOT NULL CHECK (BASIC >= 0),
    HRA DECIMAL(10,2) NOT NULL CHECK (HRA >= 0),
    ALLOWANCE DECIMAL(10,2) NOT NULL CHECK (ALLOWANCE >= 0),
    SALARY DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    PF DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    TDS DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    NET_SALARY DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    CONSTRAINT FK_EMPLOYEE FOREIGN KEY (EID) REFERENCES EMPLOYEE_MASTER(EID)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE TABLE SALARY_HISTORY (
    EID INT PRIMARY KEY,
    BASIC DECIMAL(10,2) NOT NULL,
    HRA DECIMAL(10,2) NOT NULL,
    ALLOWANCE DECIMAL(10,2) NOT NULL,
    SALARY DECIMAL(10,2) NOT NULL,
    PF DECIMAL(10,2) NOT NULL,
    TDS DECIMAL(10,2) NOT NULL,
    NET_SALARY DECIMAL(10,2) NOT NULL,
    effective_from DATE NOT NULL,
    effective_to DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (EID) REFERENCES EMPLOYEE_MASTER(EID)
);

select * from employee_master;